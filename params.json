{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A simple module to create/destroy couchdb database and create basic views for couch document models","google":"","name":"Couch-init","body":"# couch-init [![Build Status](https://travis-ci.org/twilson63/couch-init.png?branch=master)](https://travis-ci.org/twilson63/couch-init)\r\n\r\nCouch-Init is a nifty way to specify your couchdb database and\r\nviews.  CI adds some api methods to simplify your setup and tear down db process.  \r\n\r\n## Install\r\n\r\n```\r\nnpm install couch-init\r\n```\r\n\r\n## Usage:\r\n\r\nCreate a db.js file and create your module\r\n\r\n```\r\n//db.js\r\n\r\nvar async = require('async');\r\n\r\nmodule.exports = function(dbUrl) {\r\n  var init = require('couch-init')(dbUrl);\r\n\r\n  return {\r\n    build: function(cb) {\r\n      var fn = async.apply;\r\n      async.series([\r\n        fn(init.createDb),\r\n        fn(createViews, 'post', ['author', 'title']),\r\n        fn(addView, 'post', 'author-title', function(doc){\r\n          if (doc.docType === 'post') {\r\n            emit(doc.author + ':' + doc.title.split(' ').join('-'));\r\n          }\r\n        }),\r\n        fn(createViews, 'user', ['email'])\r\n      ], cb);\r\n    },\r\n    drop: init.destroyDb;\r\n  }\r\n}\r\n```\r\n\r\n## API\r\n\r\n### `createDb([callback])`\r\n\r\n### `destroyDb([callback])`\r\n\r\ncreateDb and destroyDb are pretty self explanatory, each function takes an optional callback and creates and destroys\r\na couchDb database respectively.\r\n\r\n\r\n### `createViews(model, fields, callback)\r\n\r\n`createView` takes a single model name and an array of key\r\ncolumns with a callback to create a view for a document type.\r\n\r\nThe design doc name is the plural version of the model name and it creates a basic view called `all` that filters on the `docType` key equal to the model name.\r\n\r\nthen any key listed in the array of fields, CI creates a view for each one.  For example:\r\n\r\n```\r\ninit.createViews('post', ['author','slug','posted'], function(err, res) {\r\n  console.log('created design document called posts');\r\n  console.log('it has four views');\r\n  console.log('all, author, slug, posted');\r\n});\r\n```\r\nEach view basically defines which field will be emitted\r\nas the key of a key value result.\r\n\r\n### `addView(model, view, fn, callback)`\r\n\r\nAdds a view for a specified model to the design document \r\nfor that model.\r\n\r\n```\r\ninit.addView('post', 'author-title', \r\n  function(doc) {\r\n    if (doc.docType === 'post') {\r\n      emit(doc.author + ':' + doc.title, doc);\r\n    }\r\n  }, \r\n  function(err) {\r\n    console.log('add view called author:title');\r\n    console.log('to posts design doc');\r\n  }\r\n);\r\n```\r\n\r\n## LICENSE\r\n\r\nMIT\r\n\r\n## Contributions\r\n\r\npull requests are welcome.\r\n\r\n## TODO\r\n\r\n### `destroyViews(model, callback)`\r\n\r\nRemoves the specified design doc based on the plural version\r\nof the model name.\r\n\r\n```\r\ninit.detroyViews('post', function(err) { \r\n  console.log('removes design document posts');\r\n});\r\n```\r\n\r\n### `removeView(model, view, callback)`\r\n\r\nRemoves the specified view from the design doc of the model.\r\n\r\n```\r\ninit.removeView('post', 'author-title', function(err) {\r\n  console.log('removed view author-title from posts doc');\r\n});\r\n```\r\n"}